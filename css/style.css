*,
*::after,
*::before {
  box-sizing: inherit;
  margin: 0;
  padding: 0;
}

html {
  font-size: 62.5%;
  /* 16px = 100% > 10px = 62.5% */
  /* We set the global font size in the html because REM is related to root sont size */
}

@keyframes moveInLeft {
  /* Header Title box ANIMATIONS */
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  /* test */
  50% {
    opacity: 0.4;
  }
  /* test */
  75% {
    opacity: 0.6;
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  /* test */
  50% {
    opacity: 0.4;
  }
  /* test */
  75% {
    opacity: 0.6;
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(5rem);
  }
  /* test */
  50% {
    opacity: 0.4;
  }
  /* test */
  75% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

body {
  /* Font Resets */
  font-family: "Lato", sans-serif;
  /* Intotdeauna punem fontul in body */
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 2rem;
  /* Punem un padding in jurul intregului continut in pagina */
  box-sizing: border-box;
}

.btn {
  /* Header Button */
  /* Header Button Glowin Effect */
}

.btn:link, .btn:visited {
  /* We always use :link and :visited pseudoclasses as a state of an element */
  text-transform: uppercase;
  font-size: 1.6rem;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /* We should always display inline block in order to apply padding height width to elements */
  border-radius: 10rem;
  transition: all 0.2s;
  /* All transitions (hover and active transforms) should be animated in .2s */
  position: relative;
}

.btn--white {
  background-color: #fff;
  color: #777;
}

.btn--white::after {
  background-color: #fff;
}

.btn:hover {
  transform: translateY(-0.3rem);
  /* When hovered btn should slitly move up */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* First value is in x direction, second in Y and third is the blur and last color (we put rgba because
      we want transparency on color (.2)) */
}

.btn:hover::after {
  /* We want some properties for after only when we have the hover state */
  transform: scaleX(1.5) scaleY(1.6);
  opacity: 0;
  /* this is how we make something fading out */
}

.btn:active {
  transform: translateY(-0.1rem);
  /* When pressed should slitly move down */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
  /* We set lower shadow values to create the illusion of pressed button */
}

.btn::after {
  content: "";
  /* Always specify content in an 'after' element */
  display: inline-block;
  /* We specify display as i-b because the element btn is i-b */
  width: 100%;
  height: 100%;
  position: absolute;
  border-radius: 10rem;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn--animated {
  animation: moveInBottom 1.75s ease-out 0.75s;
  /* animation: NAME DURATION TIMING-FUNCTION DELAY */
  animation-fill-mode: backwards;
  /* ! Punem animatia invers deoarece se vedea butonul inainte de animatie*/
}

.header {
  height: 95vh;
  /* At any time the header  HEIGHT should be visible 95% of the viewport.  */
  background-image: linear-gradient(to right bottom, rgba(85, 197, 122, 0.6), rgba(40, 180, 133, 0.6)), url("../img/hero.jpg");
  /* We always use background-image when we need a gradient.
  The gradient will be on top being before url */
  background-size: cover;
  /* Whatever the width of vieport or the the element it will try to fit it */
  background-position: top;
  /* The top of the image stays the same when we change the viewport size */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0% 100%);
  /* We use vh to be more dynamic on viewport changes */
  position: relative;
  /* Logo */
  /* Header Title Box */
}

.header__logo-box {
  left: 4rem;
  position: absolute;
  top: 4rem;
}

.header__logo {
  height: 3.5rem;
  /* We don`t specify the height of the element because height will automatically adjust it */
}

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* We use transform to correct the center position.
    So absolute positioning with translate will keep element in the center */
  text-align: center;
  /* We use text align to center in order to center text elements like f e the button */
}

.header-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Removes (sometimes) animation unwanted shaking effect */
  margin-bottom: 6rem;
  /* ?????? */
}

.header-primary--main {
  display: block;
  /* We set display: block; because we want the headings to be displayed one beyound another */
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  margin-right: -3.5rem;
  /* This margin is needed because letter-spacing property also adds that space AFTER the last letter. */
  animation: moveInLeft 2.5s ease-out;
  /* animation-timing-function: ease-out; */
  /* animation-delay: 2s; */
  /* animation-iteration-count: 3; */
}

.header-primary--sub {
  animation: moveInRight 2.5s ease-out;
  display: block;
  /* We set display: block; because we want the headings to be displayed one beyound another */
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 17.53px;
  margin-right: -17.53px;
  /* This margin is needed because letter-spacing property also adds that space AFTER the last letter. */
}

.row {
  max-width: 114rem;
  background-color: #5E454B;
  color: #FFF47D;
  margin: 0 auto;
}

.row:not(:last-child) {
  margin-bottom: 8rem;
}

.row::after {
  content: "";
  display: table;
  clear: both;
}

.row [class^="col-"] {
  background-color: #00A19D;
  float: left;
  padding: 1rem;
}

.row [class^="col-"]:not(:last-child) {
  margin-right: 6rem;
}

.row .col-1-of-2 {
  width: calc((100% - 6rem) / 2);
}

.row .col-1-of-3 {
  width: calc((100% - 2 * 6rem) / 3);
}

.row .col-1-of-4 {
  width: calc((100% - 3 * 6rem) / 4);
}

.row .col-2-of-4 {
  width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem);
}

.row .col-2-of-3 {
  width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem);
}

.row .col-3-of-4 {
  width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem);
}
